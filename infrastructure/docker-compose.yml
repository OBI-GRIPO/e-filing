version: '3.6'

volumes:
  mongo-volume:
    driver: local
  formio-volume:
    driver: local
  bonita-volume:
    driver: local
  bonitad-volume:
    driver: local
  postgres-volume:
    driver: local
  alfresco-data-volume:
    driver: local
  alfresco-tomcat-logs:
    driver: local
  alfresco-share-logs:
    driver: local  
  alfresco-sorl-logs:
    driver: local
  alfresco-sorl-data:
    driver: local
  wp-content:
    driver: local
  mysql-data:
    driver: local
    
networks:
  obi_net:
    external: true

services:

  postgres:
    image: postgres:9.4
    networks:
      - obi_net
    volumes:
      - postgres-volume:/var/lib/postgresql/data
      - ${PWD}/assets/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD={--postgres_password--}
      - ALFRESCO_DB=alfresco
      - ALFRESCO_DB_USER={--alfresco_db_user--}
      - ALFRESCO_DB_USER_PASSWORD={--alfresco_db_password--}
      - BONITA_DB_NAME=bonitadb
      - BONITA_DB_USER=bonitauser
      - BONITA_DB_PASS={--bonita_db_pass--}
      - BONITA_BIZ_DB_NAME=businessdb
      - BONITA_BIZ_DB_USER=businessuser
      - BONITA_BIZ_DB_PASS={--bonita_db_biz_pass--}
    command:
      - -c
      - max_prepared_transactions=100
    deploy:
      replicas: 1
      restart_policy:
        delay: 0s
        window: 120s
      placement:
        constraints: [node.role == manager]
         
  mongodb:
    image: mongo
    networks:
      - obi_net
    volumes:
      - mongo-volume:/data/db
    deploy:
      replicas: 1
      restart_policy:
        delay: 0s
        window: 120s
      placement:
        constraints: [node.role == manager]
              
  formio-api:
    image: skarvelis/formio-api:1.0
    build:
      context: ${PWD}/vendors/dfio
    networks:
      - obi_net
    extra_hosts:
      - "{--formio_host--}: {--formio_host_ip--}"
    environment:
      - VIRTUAL_HOST=formio-api
      - DB_HOST=mongodb
      - DB_NAME=formio
      - ADMIN_EMAIL={--formio_admin_email--}
      - ADMIN_PASS={--formio_admin_password--}
      - JWT_SECRET={--formio_jwt_secret--}
    depends_on:
      - mongodb
    volumes:
      - formio-volume:/app
      - ${PWD}/assets/waitmongodb.sh:/waitmongodb.sh
    deploy:
      replicas: 1
      restart_policy:
        delay: 25s
        window: 120s
      placement:
        constraints: [node.role == manager]
    entrypoint:
      - bash
      - -c
      - |
        set -e
        echo 'Waiting for MongoDB to be available'
        aa=$$(/waitmongodb.sh &>/dev/null || true)        
        exec /start.sh        

  bonita:
    image: bonita:7.6.3
    networks:
      - obi_net
    environment:
      - POSTGRES_ENV_POSTGRES_PASSWORD={--postgres_password--}
      - ENSURE_DB_CHECK_AND_CREATION=false
      - DB_ADMIN_USER=postgres
      - DB_ADMIN_PASS={--postgres_password--}
      - DB_VENDOR=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bonitadb
      - DB_USER=bonitauser
      - DB_PASS={--bonita_db_pass--}
      - BIZ_DB_NAME=businessdb
      - BIZ_DB_USER=businessuser
      - BIZ_DB_PASS={--bonita_db_biz_pass--}
      - TENANT_LOGIN={--bonita_tenant_login--}
      - TENANT_PASSWORD={--bonita_tenant_password--}
      - PLATFORM_LOGIN={--bonita_platform_login--}
      - PLATFORM_PASSWORD={--bonita_platform_password--}
      - HTTP_API=true
    depends_on:
      - postgres
    volumes:
      - bonita-volume:/opt/bonita
    entrypoint:
      - bash
      - -c
      - |
        set -e
        echo 'Waiting for Postgres to be available'
        export PGPASSWORD="$$POSTGRES_ENV_POSTGRES_PASSWORD"
        maxTries=20
        while [ "$$maxTries" -gt 0 ] && ! psql -h "$$DB_HOST" -U 'postgres' -c '\l'; do
            let maxTries--
            sleep 5
        done
        echo
        if [ "$$maxTries" -le 0 ]; then
            echo >&2 'error: unable to contact Postgres after 20 tries'
            exit 1
        fi
        exec /opt/files/startup.sh
    deploy:
      replicas: 1
      restart_policy:
        delay: 25s
        window: 120s
      placement:
        constraints: [node.role == manager]
  
  bonita-desktop:
    image: dorowu/ubuntu-desktop-lxde-vnc
    networks:
      - obi_net
    environment: 
      - VNC_PASSWORD={--bd_vnc_password--}
      - USER={--bd_user--} 
      - PASSWORD={--bd_password--}
    volumes:
      - bonitad-volume:/home/{--bd_user--}
    deploy:
      replicas: 0
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]

  node:
    image: "node"
    networks:
      - obi_net
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ${PWD}/obif/:/home/node/app
    command: "npm start"
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]

  alfresco:
    image: obi/alf-platform:5.2.g
    build: 
      context: ${PWD}/vendors/alf/alf-platform/
      args:
        - ALFRESCO_DB_USER={--alfresco_db_user--}
        - ALFRESCO_DB_USER_PASSWORD={--alfresco_db_password--}
        - ALFRESCO_ADMIN_PASSWORD={--alfresco_admin_password--}
    environment:
      CATALINA_OPTS: "-Xmx1G -XX:+UseConcMarkSweepGC"
      POSTGRES_ENV_POSTGRES_PASSWORD: "{--postgres_password--}"
      DB_HOST: "postgres"
      ALFRESCO_ADMIN_PASSWORD: "{--alfresco_admin_password--}"
    depends_on:
      - postgres
    networks:
      - obi_net
    extra_hosts:
      - "{--alfresco_host--}:{--alfresco_host_ip--}"
    volumes:
      - alfresco-tomcat-logs:/usr/local/tomcat/logs/
      - alfresco-data-volume:/opt/alf_data
      - ${PWD}/assets/waitlibreoffice.sh:/waitlibreoffice.sh
    tmpfs:
      - /tmp
      - /usr/local/tomcat/temp/
      - /usr/local/tomcat/work/
    deploy:
      replicas: 1
      restart_policy:
        delay: 45s
        window: 220s
      placement:
        constraints: [node.role == manager]
    entrypoint:
      - bash
      - -c
      - |
        set -e
        echo 'Waiting for Postgres to be available'
        export PGPASSWORD="$$POSTGRES_ENV_POSTGRES_PASSWORD"
        maxTries=40
        while [ "$$maxTries" -gt 0 ] && ! psql -h "$$DB_HOST" -U 'postgres' -c '\l'; do
            let maxTries--
            sleep 5
        done
        echo
        if [ "$$maxTries" -le 0 ]; then
            echo >&2 'error: unable to contact Postgres after 40 tries'
            exit 1
        fi
        echo 'Waiting for Libreoffice to be available'
        aa=$$(/waitlibreoffice.sh &>/dev/null || true)
        echo "set admin password (just ignore error if alfresco db does not yet exists)"
        psql -U 'postgres' -h "$$DB_HOST" alfresco << EOSQL
        UPDATE alf_node_properties  
         SET string_value='$${ALFRESCO_ADMIN_PASSWORD}'
         WHERE 
         node_id= (SELECT anp1.node_id      
           FROM alf_node_properties anp1  
           INNER JOIN alf_qname aq1 ON aq1.id = anp1.qname_id   
           INNER JOIN alf_node_properties anp2 ON anp2.node_id = anp1.node_id    
           INNER JOIN alf_qname aq2 ON aq2.id = anp2.qname_id                    
           WHERE aq1.local_name = 'password'
           AND aq2.local_name = 'username'
           AND anp2.string_value = 'admin')
         AND 
         qname_id=(SELECT anp1.qname_id      
           FROM alf_node_properties anp1  
           INNER JOIN alf_qname aq1 ON aq1.id = anp1.qname_id   
           INNER JOIN alf_node_properties anp2 ON anp2.node_id = anp1.node_id    
           INNER JOIN alf_qname aq2 ON aq2.id = anp2.qname_id                    
           WHERE aq1.local_name = 'password'
           AND aq2.local_name = 'username'
           AND anp2.string_value = 'admin'); 
        EOSQL
        exec /usr/local/tomcat/bin/catalina.sh run

  libreoffice:
    image: obi/alf-libreoffice:5.4.7
    build: 
      context: ${PWD}/vendors/alf/alf-libreoffice/
    networks:
      - obi_net
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]

  solr:
    image: obi/alf-solr:5.2.g
    build: 
      context: ${PWD}/vendors/alf/alf-sorl/
    environment:
      CATALINA_OPTS: "-Xmx1G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:G1HeapRegionSize=8m -XX:MaxGCPauseMillis=200"
    depends_on:
      - alfresco
    networks:
      - obi_net
    volumes:
      - alfresco-sorl-logs:/usr/local/tomcat/logs/
      - alfresco-sorl-data:/opt/solr_data
    tmpfs:
      - /tmp
      - /usr/local/tomcat/temp/
      - /usr/local/tomcat/work/
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]
    entrypoint:
      - bash
      - -c
      - |
        echo "Wait alfresco"
        until $$(curl --output /dev/null --silent --head --fail http://alfresco:8080/alfresco/); do
          printf '.'
          sleep 5
        done
        exec /usr/local/tomcat/bin/catalina.sh run

  share:
    image: obi/alf-share:5.2.f
    build: 
      context: ${PWD}/vendors/alf/alf-share/    
    environment:
      CATALINA_OPTS: "-Xmx1G -XX:+UseConcMarkSweepGC"
    depends_on:
      - alfresco
    networks:
      - obi_net
    extra_hosts:
      - "{--alfresco_host--}:{--alfresco_host_ip--}"
    volumes:
      - alfresco-share-logs:/usr/local/tomcat/logs/
    tmpfs:
      - /tmp
      - /usr/local/tomcat/temp/
      - /usr/local/tomcat/work/
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]
    entrypoint:
      - bash
      - -c
      - |
        echo "Wait alfresco"
        until $$(curl --output /dev/null --silent --head --fail http://alfresco:8080/alfresco/); do
          printf '.'
          sleep 5
        done
        exec /usr/local/tomcat/bin/catalina.sh run

  https-portal:
    image: steveltn/https-portal
    networks:
      - obi_net
    depends_on:
      - mysql
    ports:
      - 80:80
      - 443:443
    environment:
      - "DOMAINS=efiling.obi.gr -> http://wordpress"
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]
        
  wordpress:
    image: wordpress
    networks:
      - obi_net
    depends_on:
      - mysql
    volumes:
      - wp-content:/var/www/html/wp-content
      - ${PWD}/assets/wp/setWpDefines.sh:/usr/local/bin/setWpDefines.sh
      - ${PWD}/assets/wp/etc/php/conf.d/upload.ini:/usr/local/etc/php/conf.d/upload.ini
    environment:
      WORDPRESS_DB_PASSWORD: {--mysql_password--}
      WORDPRESS_DB_HOST: mysql:3306
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]

  mysql:
    image: mysql:5.7
    networks:
      - obi_net
    volumes:
      - mysql-data:/var/lib/mysql    
    environment:
      MYSQL_ROOT_PASSWORD: {--mysql_password--}
    deploy:
      replicas: 1
      restart_policy:
        delay: 15s
        window: 120s
      placement:
        constraints: [node.role == manager]
